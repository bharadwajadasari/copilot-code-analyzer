#!/usr/bin/env python3
"""
Test AI Marker Detection
Verify which marker patterns are detected
"""

from analyzer.balanced_detector import BalancedCopilotDetector

def test_marker_patterns():
    """Test various AI marker patterns"""
    
    config = {
        "comment_patterns": ["# Copilot", "# Generated", "# AI-generated"],
        "high_velocity_threshold": 100,
        "perfect_syntax_weight": 0.3,
        "common_patterns_weight": 0.4,
        "complexity_threshold": 10
    }
    
    detector = BalancedCopilotDetector(config)
    
    test_cases = [
        ("# AI-generated", "Your current format"),
        ("# AI-generated Class File", "Your extended format"),
        ("# Generated by Copilot", "Standard Copilot marker"),
        ("# Code Generated by Copilot", "Full Copilot marker"),
        ("# This file was AI-generated", "Natural language marker"),
        ("# @generated", "Simple generated marker"),
    ]
    
    print("🧪 TESTING AI MARKER DETECTION")
    print("=" * 50)
    
    for marker, description in test_cases:
        test_code = f'''{marker}

def example_function():
    """Example function for testing"""
    return "Hello World"

class ExampleClass:
    def __init__(self):
        self.value = 42
'''
        
        result = detector.analyze_content(test_code, ".py")
        confidence = result['confidence_score']
        has_markers = result.get('indicators', {}).get('explicit_markers', False)
        
        status = "✅ DETECTED" if confidence > 0.5 else "❌ NOT DETECTED"
        
        print(f"{status} | {marker:<30} | {confidence:.1%} confidence")
        print(f"         | {description}")
        print()

if __name__ == "__main__":
    test_marker_patterns()