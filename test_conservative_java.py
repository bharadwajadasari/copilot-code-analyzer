#!/usr/bin/env python3
"""
Test Conservative Java Detection
Demonstrates conservative detection on Java code with realistic 10-15% rates
"""

import json
import sys
import os

# Add project root to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from analyzer.conservative_evasion_detector import ConservativeEvasionDetector

def create_java_samples():
    """Create Java samples for conservative testing"""
    
    # AI-generated Java with strong indicators
    strong_ai_java = '''
package com.example.service;

import java.util.*;
import java.util.stream.Collectors;

/**
 * UserDataProcessor - AI Generated Service Class
 * 
 * This class processes user data with comprehensive validation and error handling.
 * Generated by GitHub Copilot for demonstration purposes.
 */
public class UserDataProcessor {
    
    private static final Logger logger = LoggerFactory.getLogger(UserDataProcessor.class);
    private final Map<String, Object> configurationData;
    
    /**
     * Constructor for UserDataProcessor with configuration validation.
     * 
     * @param configurationData Configuration parameters for processing
     * @throws Exception if configuration validation fails
     */
    public UserDataProcessor(Map<String, Object> configurationData) throws Exception {
        if (configurationData == null) {
            throw new IllegalArgumentException("Configuration data cannot be null");
        }
        validateUserData(configurationData);
        this.configurationData = configurationData;
    }
    
    /**
     * Process user data with validation and transformation.
     * 
     * @param userData The user data to process
     * @param validateInput Whether to validate input data
     * @return ProcessedUserData result object
     * @throws Exception if processing fails
     */
    public ProcessedUserData processUserData(List<UserData> userData, boolean validateInput) throws Exception {
        if (userData == null || userData.isEmpty()) {
            return new ProcessedUserData();
        }
        
        try {
            if (validateInput) {
                userData = validateUserDataList(userData);
            }
            
            List<UserData> processedUserData = userData.stream()
                .filter(item -> item != null && item.isValid())
                .map(this::transformUserData)
                .collect(Collectors.toList());
            
            return new ProcessedUserData(processedUserData);
            
        } catch (Exception e) {
            logger.error("Error processing user data: " + e.getMessage());
            e.printStackTrace();
            throw new Exception("Failed to process user data", e);
        }
    }
    
    private void validateUserData(Map<String, Object> configurationData) throws Exception {
        // Validation logic here
    }
    
    private List<UserData> validateUserDataList(List<UserData> userData) {
        return userData.stream()
            .filter(this::isValidUserData)
            .collect(Collectors.toList());
    }
    
    private boolean isValidUserData(UserData userData) {
        return userData != null && userData.getId() != null && userData.getName() != null;
    }
    
    private UserData transformUserData(UserData userData) {
        // Transform the user data
        return userData;
    }
}
'''
    
    # Moderate AI-generated Java
    moderate_ai_java = '''
package com.example.util;

import java.util.*;

public class DataHelper {
    
    public Map<String, Object> processData(List<Map<String, Object>> inputData) {
        Map<String, Object> result = new HashMap<>();
        
        if (inputData == null || inputData.isEmpty()) {
            return result;
        }
        
        try {
            List<Map<String, Object>> processedItems = new ArrayList<>();
            
            for (Map<String, Object> item : inputData) {
                if (item != null && !item.isEmpty()) {
                    Map<String, Object> processedItem = processItem(item);
                    processedItems.add(processedItem);
                }
            }
            
            result.put("processedData", processedItems);
            result.put("count", processedItems.size());
            
        } catch (Exception e) {
            e.printStackTrace();
            return new HashMap<>();
        }
        
        return result;
    }
    
    private Map<String, Object> processItem(Map<String, Object> item) {
        Map<String, Object> processed = new HashMap<>();
        
        item.forEach((key, value) -> {
            if (value != null) {
                processed.put(key.toLowerCase(), value.toString());
            }
        });
        
        return processed;
    }
}
'''
    
    # Human-written Java
    human_java = '''
package com.company.customer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

// Customer service implementation for our CRM system
public class CustomerService {
    
    // Process customer orders for the quarterly report
    public Map<String, Object> processOrders(List<Order> orders) {
        Map<String, Object> summary = new HashMap<>();
        
        if (orders == null || orders.size() == 0) {
            summary.put("error", "No orders to process");
            return summary;
        }
        
        List<Order> validOrders = new ArrayList<>();
        double totalAmount = 0.0;
        
        // Filter and calculate totals
        for (Order order : orders) {
            if (order.getAmount() > 0 && order.getCustomerId() != null) {
                validOrders.add(order);
                totalAmount += order.getAmount();
            }
        }
        
        summary.put("validOrders", validOrders.size());
        summary.put("totalAmount", totalAmount);
        summary.put("averageAmount", totalAmount / validOrders.size());
        
        return summary;
    }
    
    // Helper method to validate customer data
    private boolean isValidCustomer(Customer customer) {
        return customer != null && 
               customer.getId() != null && 
               customer.getName() != null &&
               customer.getEmail() != null;
    }
}
'''
    
    return {
        'strong_ai_java': strong_ai_java,
        'moderate_ai_java': moderate_ai_java,
        'human_java': human_java
    }

def test_conservative_java():
    """Test conservative detection on Java samples"""
    
    print("Conservative Java AI Detection Test")
    print("=" * 40)
    
    # Initialize conservative detector
    config = {
        'conservative_mode': True,
        'ai_indicators': {}
    }
    
    detector = ConservativeEvasionDetector(config)
    
    # Get Java samples
    samples = create_java_samples()
    
    # Test each sample
    results = {}
    
    for sample_name, java_code in samples.items():
        print(f"\nAnalyzing {sample_name.replace('_', ' ').title()}:")
        print("-" * 35)
        
        analysis = detector.analyze_content(java_code, '.java')
        results[sample_name] = analysis
        
        print(f"AI Confidence: {analysis['copilot_confidence']:.2%}")
        print(f"Risk Level: {analysis['risk_level']}")
        print(f"Estimated Lines: {analysis['estimated_lines']}")
        
        # Show conservative analysis breakdown
        conservative_data = analysis.get('conservative_analysis', {})
        if conservative_data:
            print(f"Raw Confidence: {conservative_data.get('raw_confidence', 0):.2%}")
            print(f"Calibration Applied: -{conservative_data.get('calibration_applied', 0):.2%}")
            print(f"Explicit Markers: {conservative_data.get('explicit_score', 0):.2f}")
            print(f"Semantic Score: {conservative_data.get('semantic_score', 0):.2f}")
            print(f"Naming Score: {conservative_data.get('naming_score', 0):.2f}")
        
        # Show evasion resistance
        evasion_data = analysis.get('evasion_resistance', {})
        if evasion_data.get('evasion_detected'):
            print(f"Evasion Detected: {', '.join(evasion_data.get('evasion_indicators', []))}")
        
        print("Explanation:")
        for explanation in analysis.get('explanation', []):
            print(f"  • {explanation}")
    
    # Summary
    print("\n" + "=" * 40)
    print("JAVA CONSERVATIVE DETECTION SUMMARY")
    print("=" * 40)
    
    for sample_name, result in results.items():
        confidence = result['copilot_confidence']
        risk_level = result['risk_level']
        
        print(f"{sample_name.replace('_', ' ').title():<20}: {confidence:.1%} ({risk_level})")
    
    # Analysis
    strong_conf = results['strong_ai_java']['copilot_confidence']
    moderate_conf = results['moderate_ai_java']['copilot_confidence']
    human_conf = results['human_java']['copilot_confidence']
    
    print(f"\nJava Detection Analysis:")
    print(f"Strong AI Java: {strong_conf:.1%}")
    print(f"Moderate AI Java: {moderate_conf:.1%}")
    print(f"Human Java: {human_conf:.1%}")
    
    avg_detection = (strong_conf + moderate_conf + human_conf) / 3
    print(f"Average Detection: {avg_detection:.1%}")
    
    if avg_detection <= 0.15:
        print("✅ Conservative detection achieved realistic rates")
    else:
        print("⚠️ Detection rates higher than 15% target")
    
    print("\nJava Conservative Features:")
    print("• Requires explicit AI markers for highest confidence")
    print("• Detects strong Java AI patterns (exception handling, annotations)")
    print("• Identifies distinctive AI naming (userData, processUserData)")
    print("• Applies language-specific calibration")
    print("• Maintains evasion resistance against Java formatters")

if __name__ == "__main__":
    test_conservative_java()